
package com.wzlue.chain.web.controller.storage;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.wzlue.chain.sys.entity.SysUserEntity;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.wzlue.chain.web.controller.sys.AbstractController;

import com.wzlue.chain.storage.entity.DemandEntity;
import com.wzlue.chain.storage.service.DemandService;
import com.wzlue.chain.common.utils.PageUtils;
import com.wzlue.chain.common.base.Query;
import com.wzlue.chain.common.base.R;
import springfox.documentation.annotations.ApiIgnore;


/**
 * 仓储求购表
 * 
 * @author 
 * @email 
 * @date 2018-08-27 14:15:37
 */
@RestController
@RequestMapping("/storage/demand")
@Api(value = "仓储求购")
public class DemandController extends AbstractController{
	@Autowired
	private DemandService demandService;

	/**
	 * 列表
	 */
	@GetMapping("/list")
//	@ApiOperation(value = "仓储求购列表接口")
//	@ApiImplicitParams({
//			@ApiImplicitParam(paramType = "header", name = "token", value = "token", required = true, dataType = "string"),
//			@ApiImplicitParam(paramType = "query", name = "page", value = "页码", defaultValue = "1", dataType = "int"),
//			@ApiImplicitParam(paramType = "query", name = "limit", value = "一页几条", defaultValue = "10", dataType = "int"),
//			@ApiImplicitParam(paramType = "query", name = "title", value = "标题", dataType = "string"),
//			@ApiImplicitParam(paramType = "query", name = "status", value = "状态: 0.显示 1.隐藏", dataType = "int")
//	})
	public R list(@ApiIgnore @RequestParam Map<String, Object> params){
		//查询列表数据
		Query query = new Query(params);
		SysUserEntity user = getUser();
		if(user.getCompanyId()!=null){
			//查询本公司的求购信息
			query.put("merchantId",user.getCompanyId());
		}

		List<DemandEntity> demandList = demandService.queryList(query);
		int total = demandService.queryTotal(query);

		return R.page(demandList,total);
	}


	/**
	 * 信息
	 */
	@GetMapping("/info/{id}")
//	@RequiresPermissions("storage:demand:info")
//	@ApiOperation(value = "仓储求购详情接口")
//	@ApiImplicitParams({
//			@ApiImplicitParam(paramType = "header", name = "token", value = "token", required = true, dataType = "string")
//	})
	public R info(@PathVariable("id") Long id){
		DemandEntity demand = demandService.queryObject(id);

		return R.ok().put("demand", demand);
	}

	/**
	 * 保存
	 */
	@PostMapping("/save")
//	@RequiresPermissions("storage:demand:save")
	@ApiOperation(value = "仓储求购新增")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "header", name = "token", value = "token", required = true, dataType = "string")
	})
	public R save(@RequestBody DemandEntity demand){
		SysUserEntity user = getUser();
		demand.setMerchantId(user.getCompanyId());//公司id
		demand.setDeptId(null);//部门id
		demand.setDelFlag(0);
		demand.setCreatedBy(user.getUserId());
		demand.setCreatedTime(new Date());
		demandService.save(demand);

		return R.ok();
	}

	/**
	 * 修改
	 */
	@PostMapping("/update")
//	@RequiresPermissions("storage:demand:update")
//	@ApiOperation(value = "仓储求购修改接口")
//	@ApiImplicitParams({
//			@ApiImplicitParam(paramType = "header", name = "token", value = "token", required = true, dataType = "string")
//	})
	public R update(@RequestBody DemandEntity demand){
		demand.setUpdatedBy(getUserId());
		demand.setUpdatedTime(new Date());
		demandService.update(demand);

		return R.ok();
	}

	/**
	 * 删除
	 */
	@PostMapping("/delete")
//	@RequiresPermissions("storage:demand:delete")
//	@ApiOperation(value = "仓储求购删除接口")
//	@ApiImplicitParams({
//			@ApiImplicitParam(paramType = "header", name = "token", value = "token", required = true, dataType = "string")
//	})
	public R delete(@RequestBody Long[] ids){
		demandService.deleteBatch(ids);

		return R.ok();
	}
	
}
