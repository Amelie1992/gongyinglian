package com.wzlue.chain.web.controller.sys;

import com.wzlue.chain.common.base.Query;
import com.wzlue.chain.common.base.R;
import com.wzlue.chain.sys.entity.SysDictEntity;
import com.wzlue.chain.sys.service.SysDictService;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;


/**
 * 数据字典表
 * 
 * @author chenshun
 * @email sunlightcs@gmail.com
 * @date 2018-03-15 16:08:30
 */
@RestController
@RequestMapping("/sys/dict")
public class SysDictController {
	@Autowired
	private SysDictService dictService;

	/**
	 * 列表
	 */
	@RequestMapping("/list")
	@RequiresPermissions("sys:dict:list")
	public R list(@RequestParam Map<String, Object> params){
		//查询列表数据
        Query query = new Query(params);

		List<SysDictEntity> dictList = dictService.queryList(query);
		int total = dictService.queryTotal(query);
		R r= R.ok();
//		PageUtils pageUtil = new PageUtils(dictList, total, query.getLimit(), query.getPage());
		return R.page(dictList,total);
	}
	
	
	/**
	 * 信息
	 */
	@RequestMapping("/info/{id}")
	@RequiresPermissions("sys:dict:info")
	public R info(@PathVariable("id") Long id){
		SysDictEntity dict = dictService.queryObject(id);

		return R.ok().put("dict", dict);
	}
	
	/**
	 * 保存
	 */
	@RequestMapping("/save")
	@RequiresPermissions("sys:dict:save")
	public R save(@RequestBody SysDictEntity dict){
		dict.setDelFlag(0);
		try {
			dictService.save(dict);
		} catch (Exception e) {
			R.error("字典Code已重复!");
		}
		return R.ok();
	}
	
	/**
	 * 修改
	 */
	@RequestMapping("/update")
	@RequiresPermissions("sys:dict:update")
	public R update(@RequestBody SysDictEntity dict){
		dictService.update(dict);
		
		return R.ok();
	}
	
	/**
	 * 删除
	 */
	@RequestMapping("/delete")
	@RequiresPermissions("sys:dict:delete")
	public R delete(@RequestBody Long[] ids){
		dictService.deleteBatch(ids);
		
		return R.ok();
	}

	@RequestMapping("/getByType")
	public R getByType(String type){
		List<SysDictEntity> dictEntities = dictService.queryByType(type);
		return R.ok().put("dict", dictEntities);
	}

    @RequestMapping("/getByTypeRow")
    public R getByTypeRow(String type){
        List<SysDictEntity> dictEntities = dictService.queryByType(type);
        return R.page(dictEntities,dictEntities.size());
    }
	
}
