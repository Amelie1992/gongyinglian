//jqGrid的配置信息
if ($.jgrid != null) {
    $.jgrid.defaults.width = 1000;
    $.jgrid.defaults.responsive = true;
    $.jgrid.defaults.styleUI = 'Bootstrap';
    //jqgrid全局配置
    $.extend($.jgrid.defaults, {
        ajaxGridOptions: {
            headers: {
                "token": token
            }
        }
    });
}


//国际华插件
const i18n = new VueI18n({
    locale: 'zh',
    messages: {
        'zh': window.message1,
        'en': window.message2,
    }
});
//工具集合Tools
window.T = {};

// 获取请求参数
// 使用示例
// location.href = http://localhost/index.html?id=123
// T.p('id') --> 123;
var url = function (name) {
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
    var r = window.location.search.substr(1).match(reg);
    if (r != null) return unescape(r[2]);
    return null;
};
T.p = url;

//请求前缀
var baseURL = "/";

var token2=T.p("token");

if(null !=token2 && token2 !='null' ){
     localStorage.setItem("token",token2);
}

//登录token
var token = localStorage.getItem("token");


if (token == 'null'&& token2=='null') {
    parent.location.href = baseURL + 'login.html';
}

//jquery全局配置
$.ajaxSetup({
    dataType: "json",
    contentType: "application/json",
    cache: false,
    headers: {
        "token": token
    },
    xhrFields: {
        withCredentials: true
    },
    complete: function (xhr) {
        //token过期，则跳转到登录页面
        if (xhr.responseJSON && xhr.responseJSON.code == 401) {
            parent.location.href = baseURL + 'login.html';
        }
    }
});


//权限判断
function hasPermission(permission) {
    if (window.parent.permissions.indexOf(permission) > -1) {
        return true;
    } else {
        return false;
    }
}

//重写alert
window.alert = function (msg, callback) {
    parent.layer.alert(msg, function (index) {
        parent.layer.close(index);
        if (typeof(callback) === "function") {
            callback("ok");
        }
    });
};

window.msg = function (title, obj) {
    parent.layer.msg(title || '处理中', {
        icon: 3,
        shade: 0.4,
        time: false //取消自动关闭
    });
};

//重写confirm式样框
window.confirm = function (msg, callback) {
    parent.layer.confirm(msg, {btn: ['确定', '取消']},
        function () {//确定事件
            if (typeof(callback) === "function") {
                callback("ok");
            }
        });
};

//选择一条记录
//name 字段名称
function getSelectedRowId(name) {
    var grid = $('#table').bootstrapTable('getSelections');
    console.log(grid);
    if (!grid.length) {
        alert("请选择一条记录");
        return;
    }

    if (grid.length > 1) {
        alert("只能选择一条记录");
        return;
    }

    return grid[0][name.toString()];
}

//选择一条记录
//name 字段名称
function getSelectedRowIdByTableName(tableName, name) {
    var grid = $(tableName).bootstrapTable('getSelections');
    console.log(grid);
    if (!grid.length) {
        alert("请选择一条记录");
        return;
    }

    if (grid.length > 1) {
        alert("只能选择一条记录");
        return;
    }

    return grid[0][name.toString()];
}

//选择多条记录
function getSelectedRowsId(name) {
    var grid = $('#table').bootstrapTable('getSelections');
    if (!grid.length) {
        alert("请选择一条记录");
        return;
    }
    var ids = [];
    $.each(grid, function (idx, item) {
        ids[idx] = item[name.toString()];
    });
    return ids;
}

//选择一条记录
function getSelectedRow() {
    var row = $('#table').bootstrapTable('getSelections');
    if (!row.length) {
        alert("请选择一条记录");
        return;
    }
    if (row.length > 1) {
        alert("只能选择一条记录");
        return;
    }
    return row[0];
}

//选择多条记录
function getSelectedRows() {
    var row = $('#table').bootstrapTable('getSelections');
    if (!row.length) {
        alert("请选择一条记录");
        return;
    }

    return row;
}

//下面是jqGrid表格用的方法

//选择一条记录
function getSelectedRow2() {
    var grid = $("#jqGrid");
    var rowKey = grid.getGridParam("selrow");
    if (!rowKey) {
        alert("请选择一条记录");
        return;
    }

    var selectedIDs = grid.getGridParam("selarrrow");
    if (selectedIDs.length > 1) {
        alert("只能选择一条记录");
        return;
    }

    return selectedIDs[0];
}

//选择多条记录
function getSelectedRows2() {
    var grid = $("#jqGrid");
    var rowKey = grid.getGridParam("selrow");
    if (!rowKey) {
        alert("请选择一条记录");
        return;
    }

    return grid.getGridParam("selarrrow");
}

//判断是否为空
function isBlank(value) {
    return !value || !/\S/.test(value)
}

//判断Array中是否包含某个值
function contain(data, obj) {
    if (data == null || data.length == 0) {
        return false;
    }
    for (var i = 0; i < data.length; i++) {
        if (data[i] === obj)
            return true;
    }
    return false;
};

/**
 * 获取省列表
 */
function getProvinces() {
    var provinces;
    $.ajax({
        url: "/sys/provinces/provincesList",
        async: false,
        success: function (r) {
            provinces = r;
        }
    })
    return provinces;
}

/**
 * 获取市列表
 */
function getCities(value) {
    var city;
    $.ajax({
        url: "/sys/provinces/citiesList/" + value,
        async: false,
        success: function (r) {
            city = r;
        }
    })
    return city;
}

/**
 * 获取县/区列表
 */
function getAreas(value) {
    var area;
    $.ajax({
        url: "/sys/provinces/areasList/" + value,
        async: false,
        success: function (r) {
            area = r;
        }
    })
    return area;
}

/**
 * 初始化table插件,
 *      函数仅仅支持简单的列表 如果是需要添加父级列表请在函数中自行添加
 * @param obj
 * {
         url：请求后台的URL * 必填
 *      method：请求方式 默认get
 *      sortOrder：排序方式 默认 desc
 *      pageSize：每页的记录行数 默认 10
 *      queryParams : 分页参数
 *      pageList：可供选择的每页的行数 默认 [10, 25, 50, 100]
 *      height：行高 默认 600
 *      columns：列表数据 如果html已经设置 可不写
 *      列表数据 格式如下：
 *      [
                {
                    title : '序号',   //列名
                    field: 'userNumber',    //entity字段值
                    formatter:function (value, row, index) {

                        return index + 1;
                    }, //由于formatter属于回调函数 只需要定义无需执行
                    //定义事件
                    events : {
                        'click .edit' : function(e, value, row, index) {
                            //自动弹出弹出层
                            layer_show('标题', 路径, 宽度, 长度)
                        }
                    }
                },...
            ]*
 * }
 * 参考文档：https://www.cnblogs.com/landeanfen/p/4976838.html
 */
$.fn.BT = function (obj) {
    return $(this).bootstrapTable({
        url: obj.url,                           //请求后台的URL（*）
        data: obj.data || [],
        method: obj.method ? obj.method : 'get',//请求方式（*）
        // toolbar: '#toolbar',                    //工具按钮用哪个容器
        striped: true,                          //是否显示行间隔色
        cache: obj.cache ? obj.cache : true,    //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
        pagination: obj.pagination || true,                       //是否显示分页（*）
        sortable: false,                         //是否启用排序
        sortOrder: obj.sortOrder ? obj.sortOrder : "desc",//排序方式
        sidePagination: 'server',               //分页方式：client客户端分页，server服务端分页（*）
        singleSelect: obj.singleSelect ? obj.singleSelect : false,
        pageNumber: 1,                          //初始化加载第一页，默认第一页
        pageSize: obj.pageSize ? pageSize : 10, //每页的记录行数（*）
        queryParams: function (params) {
            var temp = {   //这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
                limit: params.limit,   //页面大小
                page: Math.ceil((params.offset + 1) / params.limit),  //页码
            };
            console.log(obj.queryParams);
            //对象合并
            temp = Object.assign((obj.queryParams || {}),temp);
            console.log(temp);
            return temp;
        },
        pageList: obj.pageList ? obj.pageList : [10, 25, 50, 100],        //可供选择的每页的行数（*）
        search: false,                      //是否显示表格搜索，此搜索是客户端搜索
        showColumns: false,                      //是否显示所有的列
        showRefresh: false,                      //是否显示刷新按钮
        clickToSelect: true,                    //是否启用点击选中行
        height: obj.height ? obj.height : 650,  //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
        uniqueId: obj.uniqueId ? obj.uniqueId : "ID",                         //每一行的唯一标识，一般为主键列
        showToggle: false,                       //是否显示详细视图和列表视图的切换按钮
        cardView: false,                        //是否显示详细视图
        showExport: false,                       //是否显示导出
        onLoadSuccess: obj.onLoadSuccess,         //数据加载完成以后事件
        onClickRow: obj.onClickRow,                  //单击row事件
        onEditableSave: obj.onEditableSave,//保存可编辑单元格时触发，参数field, row, oldValue, $el
        responseHandler: function (result) { //请求数据成功后，渲染表格前的方法
            return {
                "total": result.total,//总页数
                "rows": result.data   //数据
            };
        },
        columns: function () {                  //列表数据
            //获取列名
            var array = obj.columns;
            var columns = [];
            //循环所有列名
            /*$.each(array,function(index,object){
             var _array = object;
             //判断复选框
             if (!_array.checkbox){
             _array.align ? _array.align : _array.align = 'center';
             _array.halign ? _array.halign : _array.halign = 'center';
             _array.sortable ? _array.sortable : _array.sortable = true;
             }
             columns.push(_array);
             });*/
            return array;
        }
        (),
    });
}

/**
 * 刷新列表
 *      若单纯刷新 params 可不填
 * @param params 条件查询参数
 * @constructor
 */
$.fn.BTF5 = function (params) {
    params = params || {};
    //初始化页数
    //params.page = 1;
    //刷新事件
    $(this).bootstrapTable("refresh", {

        silent: true,
        query: params,
        pageNumber: 1
    });
};


/**
 * 初始化 bootstrapValidator 插件
 * @param obj
 * {
 *      fields : 字段验证
 *      success : 点击提交 回调函数
 * }
 * 参考文档：https://www.cnblogs.com/landeanfen/p/5035608.html
 */
$.fn.FM = function (obj) {
    $(this).bootstrapValidator({
        // container: 'tooltip',
        message: '字段不能为空',
        /*input状态样式图片*/
        feedbackIcons: {
            valid: 'glyphicon glyphicon-ok',
            invalid: 'glyphicon glyphicon-remove',
            validating: 'glyphicon glyphicon-refresh'
        },
        fields: obj.fields,
    }).on('success.form.bv', function (e) {
        // Prevent form submission
        e.preventDefault();

        // Get the form instance
        var $form = $(e.target);
        //回调函数
        obj.success($form);
    })
};

/**
 * bootstrapValidator 验证
 * @param obj
 * @returns {*|jQuery}
 * @constructor
 */
$.fn.VF = function (obj) {
    if (obj != null && obj != '') {
        $(this).data("bootstrapValidator").validate(obj);
    } else {
        $(this).data("bootstrapValidator").validate();
    }
    return $(this).data("bootstrapValidator").isValid();
};
/**
 * gijgo bootstrap treeview
 * @param obj
 * @constructor https://gijgo.com/tree/configuration
 */
$.fn.TREE = function (obj) {
    if (obj == null) {
        obj = {};
    }
    return $(this).tree({
        icons: {
            expand: '<i class="fa fa-plus" aria-hidden="true"></i>',
            collapse: '<i class="fa fa-minus" aria-hidden="true"></i>'
        },
        dataSource: obj.dataSource || [],//也可以设置为请求链接url
        width: obj.width || 500,//设置显示宽度
        textField: obj.textField || 'text',//设置显示文本的属性名
        childrenField: obj.childrenField || 'children',//设置子节点数组属性名称
        disabledField: obj.disabledField || 'disabledState',//设置是否禁用的属性名
        checkedField: obj.checkedField || 'checkedFieldName',//设置默认选中字段
        imageUrlField: obj.imageUrlField || 'icon',
        imageCssClassField: obj.imageCssClassField || 'faCssClass',
        iconsLibrary: 'fontawesome',
        checkboxes: obj.checkbox || true,//如果设置为true，则为每个节点添加复选框
        uiLibrary: 'bootstrap',//引用ui库
        border: obj.border || false,//启用此设置后，树的内容将按边框包装。
        primaryKey: obj.primaryKey || 'id',//指定主键key
        selectionType: obj.primaryKey || 'single',//'multiple是否选择多个
        lazyLoading: obj.lazyLoading || false,//是否启动延迟加载
    })
}
/**
 * bootstrapValidator 重置form表单
 * @constructor
 */
$.fn.RF = function () {
    $(this).data("bootstrapValidator").resetForm();
};

/**
 * 时间插件
 *  <link rel="stylesheet" href="../../plugins/datetimepicker/css/bootstrap-datetimepicker.css">
 *  <script src="../../plugins/datetimepicker/js/bootstrap-datetimepicker.js"></script>
 *  <script src="../../plugins/datetimepicker/js/locales/bootstrap-datetimepicker.zh-CN.js"></script>
 * @constructor
 */
$.fn.DATE = function (params) {
    $(this).datetimepicker({
        format: params.format || 'yyyy-mm-dd hh:ii:ss',
        language: 'zh-CN',           //语言
        autoclose: true,
        weekStart: 1,
        todayBtn: 1,//显示‘今日’按钮
        minView: params.minView || 0,//设置只显示月份
        minuteStep: 1
    });
};

/**
 * 时间format
 * @param time
 * @param format
 * @returns {null}
 */
function formatDate(time, format) {
    if (time == null || time == '') {
        return null;
    }
    var date = new Date(time);

    var year = date.getFullYear(),
        month = date.getMonth() + 1,//月份是从0开始的
        day = date.getDate(),
        hour = date.getHours(),
        min = date.getMinutes(),
        sec = date.getSeconds();
    var preArr = Array.apply(null, Array(10)).map(function (elem, index) {
        return '0' + index;
    });////开个长度为10的数组 格式为 00 01 02 03

    var newTime = format.replace(/YY/g, year)
        .replace(/MM/g, preArr[month] || month)
        .replace(/DD/g, preArr[day] || day)
        .replace(/hh/g, preArr[hour] || hour)
        .replace(/mm/g, preArr[min] || min)
        .replace(/ss/g, preArr[sec] || sec);

    return newTime;
}

/*
　 *　方法:Array.remove(dx)
　 *　功能:删除数组元素.
　 *　参数:dx删除元素的下标.
　 *　返回:在原数组上修改数组
*/
//经常用的是通过遍历,重构数组.
Array.prototype.remove = function (val) {
    var index = this.indexOf(val);
    if (index > -1) {
        this.splice(index, 1);
    }
};

function formatDate(time, format) {
    if (time == null || time == '') {
        return null;
    }
    var date = new Date(time);

    var year = date.getFullYear(),
        month = date.getMonth() + 1,//月份是从0开始的
        day = date.getDate(),
        hour = date.getHours(),
        min = date.getMinutes(),
        sec = date.getSeconds();
    var preArr = Array.apply(null, Array(10)).map(function (elem, index) {
        return '0' + index;
    });////开个长度为10的数组 格式为 00 01 02 03

    var newTime = format.replace(/YY/g, year)
        .replace(/MM/g, preArr[month] || month)
        .replace(/DD/g, preArr[day] || day)
        .replace(/hh/g, preArr[hour] || hour)
        .replace(/mm/g, preArr[min] || min)
        .replace(/ss/g, preArr[sec] || sec);

    return newTime;
}

/**
 * 首页统计展示日期格式化
 */
//js格式化时间 "yyyy-MM-dd hh:mm:ss"
Date.prototype.Format = function (fmt) {
    var o = {
        "M+": this.getMonth() + 1, //月份
        "d+": this.getDate(), //日
        "h+": this.getHours(), //小时
        "m+": this.getMinutes(), //分
        "s+": this.getSeconds(), //秒
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度
        "S": this.getMilliseconds() //毫秒
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
}
Date.prototype.addDays = function (d) {
    this.setDate(this.getDate() + d);
};
Date.prototype.addWeeks = function (w) {
    this.addDays(w * 7);
};
Date.prototype.addMonths = function (m) {
    var d = this.getDate();
    this.setMonth(this.getMonth() + m);
    if (this.getDate() < d)
        this.setDate(0);
};
Date.prototype.getWeek = function () {
    var m = this.getDay();
    return Math.floor((m + 7) / 7);
}

//获取当前季度
Date.prototype.getQuarter = function () {
    var m = this.getMonth();
    return Math.floor((m + 3) / 3);
}

//计算本周在本年度属于第几周  weekStart：每周开始于周几：周日：0，周一：1，周二：2 ...，默认为 0 - 周日
Date.prototype.getWeekOfYear = function (weekStart) { // weekStart：每周开始于周几：周日：0，周一：1，周二：2 ...，默认为周日
    weekStart = (weekStart || 0) - 0;
    if (isNaN(weekStart) || weekStart > 6)
        weekStart = 0;

    var year = this.getFullYear();
    var firstDay = new Date(year, 0, 1);
    var firstWeekDays = 7 - firstDay.getDay() + weekStart;
    var dayOfYear = (((new Date(year, this.getMonth(), this.getDate())) - firstDay) / (24 * 3600 * 1000)) + 1;
    return Math.ceil((dayOfYear - firstWeekDays) / 7) + 1;
}


Date.prototype.addQuarter = function (q) {
    var m = this.getMonth();
    this.setMonth(this.getMonth() + (q * 3));
    if (m < this.getMonth())
        this.setDate(0);
    return Math.floor((this.getMonth() + 3) / 3);
}
Date.prototype.addYears = function (y) {
    var m = this.getMonth();
    this.setFullYear(this.getFullYear() + y);
    if (m < this.getMonth()) {
        this.setDate(0);
    }
};


function formatResultDate(time) {
    if (time == null || time == '') {
        return null;
    }
    var year = time.substring(0, 4);
    var month = time.substring(4, 6);
    var day = time.substring(6, 8);
    var hour = time.substring(8, 10);
    var min = time.substring(10, 12);
    var sec = time.substring(12, 14);
    time = year + '-' + month + '-' + day + " " + hour + ":" + min + ':' + sec;
    date = new Date(time);
    return date;
}

/**
 * 文件下载
 * @param url 文件下载地址
 * @param name 文件下载名称(包括后缀名)
 */
function download(url, name) {
    if (!validateImage(url)) {
        alert("您要下载的文件不存在");
        return;
    }

    var a = document.createElement("a"), //创建a标签
        e = document.createEvent("MouseEvents"); //创建鼠标事件对象
    e.initEvent("click", false, false); //初始化事件对象
    a.href = url; //设置下载地址
    a.download = name; //设置下载文件名
    a.dispatchEvent(e); //给指定的元素，执行事件click事件
}

function validateImage(url) {
    var flag;
    $.ajax({
        url: baseURL + 'app/fileDownload/getFileExist',
        data: {urlStr: url},
        async: false,
        success: function (r) {
            flag = r;
        }
    })
    return flag;
}



