
package com.wzlue.chain.web.controller.storage;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.wzlue.chain.agent.service.ContractAnnexService;
import com.wzlue.chain.sys.entity.SysUserEntity;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wzlue.chain.web.controller.sys.AbstractController;

import com.wzlue.chain.storage.entity.StorageContractEntity;
import com.wzlue.chain.storage.service.StorageContractService;
import com.wzlue.chain.common.base.Query;
import com.wzlue.chain.common.base.R;


/**
 * 仓库合同信息表
 *
 * @author
 * @email
 * @date 2018-09-28 15:02:40
 */
@RestController
@RequestMapping("/storage/storagecontract")
public class StorageContractController extends AbstractController {
    @Autowired
    private StorageContractService storageContractService;
    @Autowired
    private ContractAnnexService contractAnnexService;

    /**
     * 列表
     */
    @RequestMapping("/list")
    public R list(@RequestParam Map<String, Object> params) {
        //查询列表数据
        Query query = new Query(params);
        SysUserEntity user = getUser();
        if (user.getCompanyId()!=null){
            query.put("companyId", user.getCompanyId());
        }

        List<StorageContractEntity> storageContractList = storageContractService.queryList(query);
        int total = storageContractService.queryTotal(query);

        return R.page(storageContractList, total);
    }


    /**
     * 信息
     */
    @RequestMapping("/info/{id}")
    @RequiresPermissions("storage:storagecontract:info")
    public R info(@PathVariable("id") Long id) {
        StorageContractEntity storageContract = storageContractService.queryObject(id);

        return R.ok().put("storageContract", storageContract);
    }

    /**
     * 保存
     */
    @RequestMapping("/save")
    @RequiresPermissions("storage:storagecontract:save")
    public R save(@RequestBody StorageContractEntity storageContract) {
        SysUserEntity user = getUser();
        storageContract.setCreateBy(user.getUserId());
        storageContract.setStorageLocation(storageContract.getFile().get(0).getUrl());
        storageContract.setCreateTime(new Date());
        storageContract.setCompanyId(user.getCompanyId());
        storageContract.setDataSource(2);//合同创建来源 1.订单创建 2.自主录入
        storageContractService.save(storageContract);

        return R.ok();
    }

    /**
     * 修改
     */
    @RequestMapping("/update")
    @RequiresPermissions("storage:storagecontract:update")
    public R update(@RequestBody StorageContractEntity storageContract) {
        storageContract.setUpdateBy(getUserId());
        storageContract.setUpdateTime(new Date());
        storageContractService.update(storageContract);

        return R.ok();
    }

    /**
     * 删除
     */
    @RequestMapping("/delete")
    @RequiresPermissions("storage:storagecontract:delete")
    public R delete(@RequestBody Long[] ids) {
        storageContractService.deleteBatch(ids);

        return R.ok();
    }
    //删除合同附件
    @RequestMapping("/deleteById")
    @RequiresPermissions("storage:storagecontract:delete")
    public R deleteById(@RequestBody Long id) {
        contractAnnexService.delete(id);

        return R.ok();
    }

    @RequestMapping("/checkCode")
    public R checkCode(@RequestBody StorageContractEntity storageContract) {
        storageContract.setCompanyId(getUser().getCompanyId());
        StorageContractEntity storageContractEntity = storageContractService.queryContract(storageContract);

        return R.ok().put("storageContract", storageContractEntity);
    }


}
