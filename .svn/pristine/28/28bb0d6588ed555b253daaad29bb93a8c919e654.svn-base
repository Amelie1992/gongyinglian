package com.wzlue.chain.marketing.service.impl;

import com.wzlue.chain.company.entity.MerchantCompanyEntity;
import com.wzlue.chain.company.service.MerchantCompanyService;
import com.wzlue.chain.marketing.entity.MarketAuctionEntity;
import com.wzlue.chain.marketing.service.MarketAuctionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.wzlue.chain.marketing.dao.MarketBidRecordDao;
import com.wzlue.chain.marketing.entity.MarketBidRecordEntity;
import com.wzlue.chain.marketing.service.MarketBidRecordService;

import static com.wzlue.chain.sys.common.util.ShiroUtils.getUserEntity;
import static com.wzlue.chain.sys.common.util.ShiroUtils.getUserId;


@Service("marketBidRecordService")
public class MarketBidRecordServiceImpl implements MarketBidRecordService {
	@Autowired
	private MarketBidRecordDao marketBidRecordDao;
    @Autowired
    private MarketAuctionService marketAuctionService;
    @Autowired
    private MerchantCompanyService merchantCompanyService;
	
	@Override
	public MarketBidRecordEntity queryObject(Long id){
		return marketBidRecordDao.queryObject(id);
	}
	
	@Override
	public List<MarketBidRecordEntity> queryList(Map<String, Object> map){
		return marketBidRecordDao.queryList(map);
	}
	
	@Override
	public int queryTotal(Map<String, Object> map){
		return marketBidRecordDao.queryTotal(map);
	}
	
	@Override
	public void save(MarketBidRecordEntity marketBidRecord){
        Long companyId = getUserEntity().getCompanyId();
        MerchantCompanyEntity companyEntity = merchantCompanyService.queryObject(companyId.intValue());
        marketBidRecord.setCompanyId(companyId.intValue());
        marketBidRecord.setCompanyName(companyEntity.getCompanyName());
        marketBidRecord.setBidTime(new Date());
        marketBidRecord.setCreateBy(getUserId().intValue());
        marketBidRecord.setCreateDate(new Date());
        marketBidRecord.setStatus(0);   //默认出局
        marketBidRecordDao.save(marketBidRecord);
        //保存最终出价
        MarketAuctionEntity marketAuction = marketAuctionService.queryObject(marketBidRecord.getAuctionId());
        marketAuction.setStartingPrice(marketBidRecord.getTerminalPrice());
        marketAuctionService.updateStartingPrice(marketAuction);
	}
	
	@Override
	public void update(MarketBidRecordEntity marketBidRecord){
		marketBidRecordDao.update(marketBidRecord);
	}
	
	@Override
	public void delete(Long id){
		marketBidRecordDao.delete(id);
	}
	
	@Override
	public void deleteBatch(Long[] ids){
		marketBidRecordDao.deleteBatch(ids);
	}

	@Override
	public int queryTotals(Long auctionId) {
		return marketBidRecordDao.queryTotals(auctionId);
	}

}
