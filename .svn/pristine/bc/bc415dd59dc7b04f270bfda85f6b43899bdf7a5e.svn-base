
package com.wzlue.chain.web.controller.storage;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.wzlue.chain.bill.entity.BillEntity;
import com.wzlue.chain.bill.service.BillService;
import com.wzlue.chain.common.enums.CreditType;
import com.wzlue.chain.company.entity.MerchantCompanyEntity;
import com.wzlue.chain.company.service.MerchantCompanyService;
import com.wzlue.chain.storage.entity.*;
import com.wzlue.chain.storage.service.*;
import com.wzlue.chain.sys.entity.SysUserEntity;
import com.wzlue.chain.sys.service.SysNumberRuleService;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wzlue.chain.web.controller.sys.AbstractController;

import com.wzlue.chain.common.base.Query;
import com.wzlue.chain.common.base.R;


/**
 * 仓储订单
 *
 * @author
 * @email
 * @date 2018-08-29 17:48:31
 */
@RestController
@RequestMapping("/storage/order")
public class OrderController extends AbstractController {
    @Autowired
    private OrderService orderService;
    @Autowired
    private OrderOfferService orderOfferService;
    @Autowired
    private OrderCostService orderCostService;
    @Autowired
    private SysNumberRuleService sysNumberRuleService;
    @Autowired
    private OrderCommodityService orderCommodityService;
    @Autowired
    private OfferService offerService;
    @Autowired
    private BillService billService;
    @Autowired
    private MerchantCompanyService merchantCompanyService;

    /**
     * 买入订单列表
     */
    @RequestMapping("/list")
    public R list(@RequestParam Map<String, Object> params) {
        //查询列表数据
        Query query = new Query(params);
        SysUserEntity user = getUser();
        if (user.getCompanyId() != null) {
            //查询本公司买入的订单信息
            query.put("merchantId", user.getCompanyId());
        }

        List<OrderEntity> orderList = orderService.queryList(query);
        int total = orderService.queryTotal(query);

        return R.page(orderList, total);
    }


    /**
     * 卖出订单列表
     */
    @RequestMapping("/list2")
    public R list2(@RequestParam Map<String, Object> params) {
        //查询列表数据
        Query query = new Query(params);
        SysUserEntity user = getUser();
        if (user.getCompanyId() != null) {
            //查询本公司卖出的订单信息
            query.put("receiptMerchantId", user.getCompanyId());
        }

        List<OrderEntity> orderList = orderService.queryList(query);
        int total = orderService.queryTotal(query);

        return R.page(orderList, total);
    }


    /**
     * 信息
     */
    @RequestMapping("/info/{id}")
    @RequiresPermissions("storage:order:info")
    public R info(@PathVariable("id") Long id) {
        OrderEntity order = orderService.queryObject(id);
        OrderOfferEntity orderOfferEntity = orderOfferService.queryByOrderId(id);
        Map<String, Object> map = new HashMap<>();
        map.put("orderId", id);
        List<OrderCommodityEntity> commodityEntityList = orderCommodityService.queryList(map);
        return R.ok().put("order", order).put("orderOfferEntity", orderOfferEntity).put("commodityEntityList", commodityEntityList);
    }

    @RequestMapping("/detail/{id}")
    @RequiresPermissions("storage:order:info")
    public R detail(@PathVariable("id") Long id) {
        OrderEntity order = orderService.queryObject(id);
        OrderOfferEntity offer = orderOfferService.queryByOrderId(id);
//		OrderCostEntity orderCost = orderCostService.queryByOrderId(id);
        Map<String, Object> map = new HashMap<>();
        map.put("orderId", id);
        List<OrderCommodityEntity> commodityEntityList = orderCommodityService.queryList(map);
        return R.ok().put("order", order).put("offer", offer).put("commodityEntityList", commodityEntityList);
    }

    @RequestMapping("/offerDetail/{id}")
    @RequiresPermissions("storage:order:info")
    public R offer(@PathVariable("id") Long id) {
        OrderOfferEntity offer = orderOfferService.queryByOrderId(id);
        return R.ok().put("offer", offer);
    }

    /**
     * 保存
     */
    @RequestMapping("/save")
    @RequiresPermissions("storage:order:save")
    public R save(@RequestBody OrderEntity order) {
        //生成编码
        //先判断是否手动输入
//        if (order.getContractNumber() == null || "".equals(order.getContractNumber())) {
//            order.setContractNumber(sysNumberRuleService.getCodeNumber("number_contract_storage"));
//        } else {
        if (order.getContractNumber() != null) {
            OfferEntity offer = new OfferEntity();
            offer.setCode(order.getContractNumber());
            OfferEntity offerEntity = offerService.checkCode(offer);
            if (offerEntity != null) {
                return R.error("编码已存在");
            }
        }else {
            order.setContractNumber(sysNumberRuleService.getCodeNumber("number_contract_storage"));
        }
        if (order.getGoodNumber() != null) {
            order.setNumber(order.getGoodNumber());
            order.setNumberType(1);
        }
        SysUserEntity user = getUser();
        order.setMerchantId(user.getCompanyId());//买家公司id
        order.setBuyCompanyName(orderService.getBuyCompany(user.getCompanyId().toString()));
        OrderOfferEntity orderOffer = order.getOrderOfferEntity();
        OfferEntity offer2 = offerService.queryObject(orderOffer.getOfferId());
        order.setMerchantContact(offer2.getContact());
        order.setMerchantPhone(offer2.getPhone());
        order.setReceiptMerchantId(offer2.getMerchantId());
        order.setSaleCompanyName(orderService.getBuyCompany(offer2.getMerchantId().toString()));
        order.setCreatedBy(user.getUserId());
        order.setCreatedTime(new Date());
        order.setDelFlag(0);
        order.setPassStatus(0);//0:待确认、1:已接单、2：仓库收到货，3：已取消
        order.setPayStatus(0);//0:仓储费未结清、1:仓储费已结清
        order.setStockStatus(1);//0:有库存、1:无库存
        order.setOrderNumber(sysNumberRuleService.getCodeNumber("number_order_buy"));
        order.setBuyStatus(0);
        order.setSellStatus(0);
        order.setAlterSale(0);
        order.setTotal(BigDecimal.ZERO);//下单时金额为0 （null的话sql里值加不了）
        orderService.save(order);
        return R.ok();
    }

    /**
     * 修改
     */
    @RequestMapping("/update")
    @RequiresPermissions("storage:order:update")
    public R update(@RequestBody OrderEntity order) {
        order.setUpdatedBy(getUserId());
        order.setUpdatedTime(new Date());
        orderService.update(order);
        if (order.getPassStatus() == 3) {
            //接单后取消订单 账单失效
            OrderEntity orderEntity = orderService.queryObject(order.getId());
            BillEntity bill = billService.queryByOrderNumber(orderEntity.getOrderNumber());
            if (bill != null) {
                bill.setValidState(1);
                billService.update(bill);
            }
            //订单取消 报盘成交数量 -1
            offerService.updateByOrderId2(order.getId());
        }
        if(order.getPassStatus()==4||order.getPassStatus()==5){   //买家or卖家结束订单---扣减信用分数
            MerchantCompanyEntity companyEntity = merchantCompanyService.queryByUserId(getUserId());
            merchantCompanyService.updateCreditType(CreditType.ORDEREND,companyEntity);

        }
        return R.ok();
    }

    /**
     * 删除
     */
    @RequestMapping("/delete")
    @RequiresPermissions("storage:order:delete")
    public R delete(@RequestBody Long[] ids) {
        orderService.deleteBatch(ids);

        return R.ok();
    }

    /**
     * 接单
     *
     * @param order
     * @return
     */
    @RequestMapping("/receipt")
    @RequiresPermissions("storage:order:update")
    public R receipt(@RequestBody OrderEntity order) {
        SysUserEntity user = getUser();
        order.setReceiptDetpId(null);//接单人部门id
        order.setReceiptTime(new Date());//接单时间
        order.setPassStatus(1);//0:待确认、1:已接单、2：仓库收到货，3：已取消
        order.setUpdatedBy(user.getUserId());
        order.setUpdatedTime(new Date());
        orderService.receipt(order);

        return R.ok();
    }


    /**
     * 到货
     *
     * @param order
     * @return
     */
    @RequestMapping("/arrival")
    @RequiresPermissions("storage:order:update")
    public R arrival(@RequestBody OrderEntity order) {
        SysUserEntity user = getUser();
        order.setPassStatus(2);//0:待确认、1:已接单、2：仓库收到货，3：已取消
        order.setStockStatus(0);//0:有库存、1:无库存
        order.setArrivalTime(new Date());//到货日期
        order.setUpdatedBy(user.getUserId());
        order.setUpdatedTime(new Date());
        orderService.arrival(order);

        return R.ok();
    }

    /**
     * 仓库方修改货物信息或其他费用
     *
     * @param order
     * @return
     */
    @RequestMapping("/updateOrder")
    @RequiresPermissions("storage:order:update")
    public R updateOrder(@RequestBody OrderEntity order) {
        SysUserEntity user = getUser();
        order.setUpdatedBy(user.getUserId());
        order.setUpdatedTime(new Date());
        orderService.updateOrder(order);

        return R.ok();
    }

    /**
     * 获取仓库报盘的公司
     *
     * @return
     */
    @RequestMapping("/getCompanys")
    public R getCompanys() {
        SysUserEntity user = getUser();
        List<MerchantCompanyEntity> companys = orderService.getCompanys(user.getCompanyId());
        return R.ok().put("companys", companys);
    }


}
