package com.wzlue.chain.complaint.service.impl;

import com.wzlue.chain.agent.dao.AgentOrderDao;
import com.wzlue.chain.agent.entity.AgentOrderEntity;
import com.wzlue.chain.common.base.Query;
import com.wzlue.chain.common.enums.CreditType;
import com.wzlue.chain.company.dao.MerchantCompanyDao;
import com.wzlue.chain.company.entity.MerchantCompanyEntity;
import com.wzlue.chain.declare.dao.DeclareOrderDao;
import com.wzlue.chain.declare.entity.DeclareOrderEntity;
import com.wzlue.chain.logistics.dao.LogisticsOrderDao;
import com.wzlue.chain.logistics.entity.LogisticsOrderEntity;
import com.wzlue.chain.order.dao.GoodsOrderDao;
import com.wzlue.chain.order.entity.GoodsOrderEntity;
import com.wzlue.chain.order.service.GoodsOrderService;
import com.wzlue.chain.storage.dao.OrderDao;
import com.wzlue.chain.storage.entity.OrderEntity;
import com.wzlue.chain.sys.entity.ImageEntity;
import com.wzlue.chain.sys.entity.SysDictEntity;
import com.wzlue.chain.sys.entity.SysUserEntity;
import com.wzlue.chain.sys.service.ImageService;
import com.wzlue.chain.sys.service.SysDictService;
import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.wzlue.chain.complaint.dao.ComplaintDao;
import com.wzlue.chain.complaint.entity.ComplaintEntity;
import com.wzlue.chain.complaint.service.ComplaintService;



@Service("complaintService")
public class ComplaintServiceImpl implements ComplaintService {
    @Autowired
    private ComplaintDao complaintDao;
    @Autowired
    private ImageService imageService;
    @Autowired
    private SysDictService dictService;
    @Autowired
    private OrderDao storageOrderDao;
    @Autowired
    private LogisticsOrderDao logisticsOrderDao;
    @Autowired
    private DeclareOrderDao declareOrderDao;
    @Autowired
    private AgentOrderDao agentOrderDao;
    @Autowired
    private GoodsOrderService goodsOrderService;
    @Autowired
    private GoodsOrderDao goodsOrderDao;
    @Autowired
    private MerchantCompanyDao merchantCompanyDao;


    @Override
    public ComplaintEntity queryObject(Integer id) {
        return complaintDao.queryObject(id);
    }

    @Override
    public List<ComplaintEntity> queryList(Map<String, Object> map) {
        return complaintDao.queryList(map);
    }

    @Override
    public int queryTotal(Map<String, Object> map) {
        return complaintDao.queryTotal(map);
    }

    @Override
    public void save(ComplaintEntity complaint) {
        //一个订单的买卖双方各自只能投诉对方一次
        ComplaintEntity complaintEntity = complaintDao.queryObjectByOrderIdAndCompanyId(complaint);
        if (complaintEntity == null) {       //投诉记录不存在，允许投诉
            complaint(complaint);
        } else {
            return;
        }
    }

    //投诉的主方法体
    private void complaint(ComplaintEntity complaint) {
        Date currentTime = new Date();
        SysUserEntity user = (SysUserEntity) SecurityUtils.getSubject().getPrincipal();
        int companyId = user.getCompanyId().intValue();
        String complaintFrom = null;       //投诉用户
        String complaintTo = null;         //被投诉用户
        Integer complaintFromId = companyId;
        Integer complaintToId = complaint.getComplaintToId();
        MerchantCompanyEntity company = merchantCompanyDao.queryObject(companyId);
        if (company!=null){
            complaintFrom=company.getCompanyName();
        }
        MerchantCompanyEntity company2 = merchantCompanyDao.queryObject(complaintToId);
        if (company2!=null){
            complaintTo=company2.getCompanyName();
        }

        //订单号--->complaint.set投诉双方、订单号
        Integer orderType = complaint.getOrderType();       //订单类型  0：报关 1：货物 2：物流 3：仓储 4：代理
        switch (orderType) {
            case 0:     //报关
                DeclareOrderEntity declareOrderEntity = declareOrderDao.queryByOrderNumber(complaint.getOrderId());
                if (declareOrderEntity != null) {
                    DeclareOrderEntity order = new DeclareOrderEntity();
                    order.setId(declareOrderEntity.getId());
                    order.setUpdateTime(new Date());
                    order.setUpdateBy(user.getUserId());
                    if (user.getCompanyId().equals(Long.valueOf(declareOrderEntity.getBuyCompanyId()))) {
                        order.setBuyStatus(1);//买家投诉
                        complaintToId=declareOrderEntity.getMerchantCompanyId();
                        complaintTo=declareOrderEntity.getMerchantCompanyName();
                    } else {
                        order.setSellStatus(1);//卖家投诉
                        complaintToId=declareOrderEntity.getBuyCompanyId();
                        complaintTo=declareOrderEntity.getBuyCompanyName();
                    }
                    declareOrderDao.update(order);
                }
                break;
            case 1:     //货物
                GoodsOrderEntity goodsOrderEntity = new GoodsOrderEntity();
                goodsOrderEntity.setOrderNumber(complaint.getOrderId());
//                goodsOrderEntity.setDetail(complaint.getDetail());
//                goodsOrderEntity.setCinfo(complaint.getCinfo());
//                complaintFrom = complaint.getComplaintFrom();
//                complaintTo = complaint.getComplaintTo();
                if (user.getCompanyId().intValue() == complaintFromId) {
                    goodsOrderEntity.setComplaintS(1);
                } else {
                    goodsOrderEntity.setComplaintP(1);
                }
//                goodsOrderService.update(goodsOrderEntity);
                goodsOrderDao.update(goodsOrderEntity);
                break;
            case 2:     //物流
                LogisticsOrderEntity logisticsOrderEntity = logisticsOrderDao.queryByOrderNumber(complaint.getOrderId());
                if (logisticsOrderEntity != null) {
                    LogisticsOrderEntity order = new LogisticsOrderEntity();
                    order.setId(logisticsOrderEntity.getId());
                    order.setUpdatedBy(user.getUserId());
                    order.setUpdatedTime(new Date());
                    //投诉人公司等于下单公司是买家投诉
                    if (user.getCompanyId().equals(logisticsOrderEntity.getMerchantCompanyId())) {
                        order.setSellStatus(1);//卖家投诉
                        complaintToId=logisticsOrderEntity.getCompanyId().intValue();
                        complaintTo=logisticsOrderEntity.getContactCompanyName();
                    } else {
                        order.setBuyStatus(1);//买家投诉
                        complaintToId=logisticsOrderEntity.getMerchantCompanyId().intValue();
                        complaintTo=logisticsOrderEntity.getMerchantCompanyName();
                    }
                    logisticsOrderDao.update(order);
                }
                break;
            case 3:     //仓储
                OrderEntity orderEntity = storageOrderDao.queryObjectByOrderNumber(complaint.getOrderId());
                if (orderEntity != null) {
                    OrderEntity order = new OrderEntity();
                    order.setId(orderEntity.getId());
                    order.setUpdatedBy(user.getUserId());
                    order.setUpdatedTime(new Date());
                    //投诉人公司等于下单公司是买家投诉
                    if (user.getCompanyId().equals(orderEntity.getMerchantId())) {
                        order.setBuyStatus(1);//买家投诉
                        complaintToId=orderEntity.getReceiptMerchantId().intValue();
                        complaintTo=orderEntity.getSaleCompanyName();
                    } else {
                        order.setSellStatus(1);//卖家投诉
                        complaintToId=orderEntity.getMerchantId().intValue();
                        complaintTo=orderEntity.getBuyCompanyName();
                    }
                    storageOrderDao.update(order);
                }
                break;
            case 4:     //代理
                AgentOrderEntity agentOrder = agentOrderDao.queryByOrderNum(complaint.getOrderId());
                if (null != agentOrder) {
                    AgentOrderEntity order = new AgentOrderEntity();
                    order.setId(agentOrder.getId());
                    order.setUpdateBy(user.getUserId());
                    order.setUpdateTime(new Date());
                    //如果等于客户公司id, 说明属于客户投诉 则修改cusComplaintStatus  表示卖家被投诉状态(买家操作投诉);
                    if (user.getCompanyId().equals(agentOrder.getContactCompanyId())) {
                        order.setCusComplaintStatus(1);
                        complaintToId=agentOrder.getMerchantCompanyId().intValue();
                        complaintTo=agentOrder.getMerchantCompanyName();
                    } else {
                        order.setMerComplaintStatus(1);
                        complaintToId=agentOrder.getContactCompanyId().intValue();
                        complaintTo=agentOrder.getContactCompanyName();
                    }
                    agentOrderDao.update(order);
                }
                break;
        }
        complaint.setComplaintFrom(complaintFrom);
        complaint.setComplaintTo(complaintTo);
        complaint.setComplaintFromId(complaintFromId);
        complaint.setComplaintToId(complaintToId);
        complaint.setComplaintTime(currentTime);      //投诉时间
        complaint.setStatus(0);                    //处理状态 0:待处理 1:处理中 2:完结
        complaint.setCreateBy(user.getUserId().intValue());
        complaint.setCreatedTime(currentTime);
        complaint.setUpdateBy(user.getUserId().intValue());
        complaint.setUpdateTime(currentTime);
        complaint.setCompanyId(user.getCompanyId().intValue());
        complaintDao.save(complaint);

        List<ImageEntity> images = complaint.getImages();
        for (ImageEntity image : images) {
            image.setType("complaint");
            image.setCode(complaint.getId());
            image.setCreateBy(user.getUserId().toString());
            image.setCreateDate(currentTime);
        }
        imageService.saveList(images);

    }

    @Override
    public void update(ComplaintEntity complaint) {
        complaintDao.update(complaint);
    }

    @Override
    public void delete(Integer id) {
        complaintDao.delete(id);
    }

    @Override
    public void deleteBatch(Integer[] ids) {
        complaintDao.deleteBatch(ids);
    }

    @Override
    public void handle(ComplaintEntity complaint) {
        Date currentTime = new Date();
        SysUserEntity user = (SysUserEntity) SecurityUtils.getSubject().getPrincipal();
        if (complaint.getResult() == 0) {       //处理结果为0：通过 时
            //被投诉方信用度扣100分。
            MerchantCompanyEntity toCompany = merchantCompanyDao.queryObject(complaint.getComplaintToId());
            merchantCompanyDao.updateCreditType(CreditType.COMPLAINT, toCompany);
        }
        complaint.setStatus(2);        //处理状态为2：完结
        complaint.setUpdateBy(user.getUserId().intValue());
        complaint.setUpdateTime(currentTime);
        complaintDao.handle(complaint);
    }


    @Override
    public ComplaintEntity queryObjectByOrderIdAndCompanyId(ComplaintEntity complaint) {
        return complaintDao.queryObjectByOrderIdAndCompanyId(complaint);
    }

    @Override
    public int getComplaint(String id) {
        SysUserEntity user = (SysUserEntity) SecurityUtils.getSubject().getPrincipal();
        ComplaintEntity complaint = new ComplaintEntity();
        complaint.setOrderId(id);
        complaint.setComplaintFromId(user.getCompanyId().intValue());
        return complaintDao.getComplaint(complaint);
    }
}
