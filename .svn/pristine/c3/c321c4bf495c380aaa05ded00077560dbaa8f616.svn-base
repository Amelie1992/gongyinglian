package com.wzlue.chain.traceback.service.impl;

import cn.hutool.core.map.MapUtil;
import com.sun.corba.se.spi.ior.ObjectKey;
import com.wzlue.chain.agent.dao.AgentOrderDao;
import com.wzlue.chain.agent.entity.AgentOrderEntity;
import com.wzlue.chain.agent.service.AgentContractService;
import com.wzlue.chain.contract.service.GoodsContractService;
import com.wzlue.chain.declare.dao.DeclareOrderDao;
import com.wzlue.chain.declare.entity.DeclareOrderEntity;
import com.wzlue.chain.declare.service.DeclareContractService;
import com.wzlue.chain.logistics.dao.LogisticsOrderDao;
import com.wzlue.chain.logistics.entity.LogisticsOrderEntity;
import com.wzlue.chain.logistics.service.LogisticsContractService;
import com.wzlue.chain.order.dao.GoodsOrderDao;
import com.wzlue.chain.order.entity.GoodsOrderEntity;
import com.wzlue.chain.storage.dao.OrderDao;
import com.wzlue.chain.storage.entity.OrderEntity;
import com.wzlue.chain.storage.entity.StorageContractEntity;
import com.wzlue.chain.storage.service.StorageContractService;
import com.wzlue.chain.traceback.dao.TraceBackDao;
import com.wzlue.chain.traceback.entity.TraceBackEntity;
import com.wzlue.chain.traceback.service.TraceBackService;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author Administrator
 */
@Service
public class TraceBackServiceImpl implements TraceBackService {
    /**
     * 所有合同dao层
     */
    @Autowired
    private TraceBackDao traceBackDao;
    /**
     * 物流
     */
    @Autowired
    private LogisticsOrderDao logisticsOrderDao;
    /**
     * 仓储
     */
    @Autowired
    private OrderDao orderDao;
    /**
     * 货物
     */
    @Autowired
    private GoodsOrderDao goodsOrderDao;
    /**
     * 报关
     */
    @Autowired
    private DeclareOrderDao declareOrderDao;
    /**
     * 代理
     */
    @Autowired
    private AgentOrderDao agentOrderDao;
    /**
     * 物流
     */
    @Autowired
    private LogisticsContractService logisticsContractService;
    /**
     * 仓储
     */
    @Autowired
    private StorageContractService storageContractService;
    /**
     * 货物
     */
    @Autowired
    private GoodsContractService goodsContractService;
    /**
     * 报关
     */
    @Autowired
    private DeclareContractService declareContractService;
    /**
     * 代理
     */
    @Autowired
    private AgentContractService agentContractService;

    @Override
    public List<TraceBackEntity> queryList(Map<String, Object> params) {
        return traceBackDao.queryList(params);
    }

    @Override
    public Integer queryTotal(Map<String, Object> params) {
        return traceBackDao.queryTotal(params);
    }

    @Override
    public Object queryInfo(Map<String, Object> params) {
        Integer orderType = (Integer) params.get("orderType");
        switch (orderType){
            case 0:
                GoodsOrderEntity goodsOrderEntity = goodsOrderDao.queryObject(params.get("id"));
                return goodsOrderEntity;
            case 1:
                return null;
            case 2:
                return null;
            case 3:
                return null;
            case 4:
                return null;
            default:
                return null;
        }
    }

    @Override
    public Map<String, Object> queryContract(Map<String, Object> params) {
        return traceBackDao.queryContract(params);
    }

    /**
     * 查询当前来源订单
     *
     * @param params
     * @return
     */
    @Override
    public Map<String, Object> querySourceOrder(Map<String, Object> params) {
        Integer orderType = (Integer) params.get("orderType");
        Map<String, Object> param = new HashMap<>(16);
        boolean flag = false;
        Map<String, Object> stringObjectMap = new HashMap<>();
        switch (orderType) {
            case 1:
                LogisticsOrderEntity logisticsOrderEntity = logisticsOrderDao.queryByOrderNumber(params.get("orderNumber").toString());
                /*LogisticsOrderEntity logisticsOrderEntity= (LogisticsOrderEntity) currentOrder;*/
                getSourceMap(param, logisticsOrderEntity.getNumberType(),logisticsOrderEntity.getNumberCode(), stringObjectMap);
                break;
            case 2:
                DeclareOrderEntity declareOrderEntity = declareOrderDao.queryByOrderNumber(params.get("orderNumber").toString());
                //DeclareOrderEntity declareOrderEntity= (DeclareOrderEntity) currentOrder;
                getSourceMap(param,declareOrderEntity.getGoodsType(),declareOrderEntity.getGoodsNumber(), stringObjectMap);
                break;
            case 3:
                OrderEntity orderEntity = orderDao.queryObjectByOrderNumber(params.get("orderNumber").toString());
                /*OrderEntity orderEntity= (OrderEntity) currentOrder;*/
                getSourceMap(param, orderEntity.getNumberType(), orderEntity.getNumber(), stringObjectMap);
                break;
            case 4:
                AgentOrderEntity agentOrderEntity = agentOrderDao.queryByOrderNum(params.get("orderNumber").toString());
                /*AgentOrderEntity agentOrderEntity= (AgentOrderEntity) currentOrder;*/
                getSourceMap(param,agentOrderEntity.getOriginFlag(),agentOrderEntity.getOriginNumber(), stringObjectMap);
                break;
            default:
                break;
        }
        return stringObjectMap;
    }

    private void getSourceMap(Map<String, Object> param, Object sourceType, Object sourceCode, Map<String, Object> stringObjectMap) {
        Object sourceMap;
        if (sourceType == null || (Integer) sourceType == 0) {
            return;
        } else {
            param.put("order_number", sourceCode);
            sourceMap = goodsOrderDao.queryObjectByCompanyIdOrOrderNumber(param);
            stringObjectMap.put("sourceMap", sourceMap);
            stringObjectMap.put("sourceType", 0);
            stringObjectMap.put("sourceCode",sourceCode);       //关联的货物订单编号
        }
    }

    /**
     * 根据当前订单号，查询该订单下面的所有来源是该订单号的订单详情
     *
     * @param params
     * @return
     */
    @Override
    public Map<String, Object> queryFatherSourceOrder(Map<String, Object> params) {
        Integer orderType = (Integer) params.get("orderType");
        String orderNumber = (String) params.get("orderNumber");
        Long companyId = (Long) params.get("companyId");
        Map<String, Object> fatherSource = new HashMap<>();
        Map<String, Object> map = new HashMap<>();
        //物流只有货物来源，为1,
        map.put("numberCode", orderNumber);
        map.put("numberType", 1);
        map.put("companyId", companyId);
        List<Map<String,Object>> logistics = logisticsOrderDao.queryListByNumberCodeAndNumberType(map);
        fatherSource.put("logistics", logistics);
        //报关
        map.put("numberCode", orderNumber);
        map.put("numberType", 1);
        map.put("companyId", companyId);
        List<Map<String,Object>> declares = declareOrderDao.queryListByNumberCodeAndNumberType(map);
        fatherSource.put("declares", declares);
        //仓储
        map.put("numberCode", orderNumber);
        map.put("numberType", 1);
        map.put("companyId", companyId);
        List<Map<String,Object>> storages = orderDao.queryListByNumberCodeAndNumberType(map);
        fatherSource.put("storages", storages);
        //代理
        map.put("numberCode", orderNumber);
        Map<String,Object> agentsOrder=new HashMap<>();
        switch (orderType) {
            case 0:
                GoodsOrderEntity listByOrderNumber = goodsOrderDao.getListByOrderNumber(orderNumber);
                if(Integer.parseInt(listByOrderNumber.getIsAgent()) == 1){
                    agentsOrder=agentOrderDao.queryByOrderNumAndBack(listByOrderNumber.getAgentOrderNumber());
                }
                map.put("numberType", 1);
                break;
            case 1:
                map.put("numberType", 2);
                break;
            case 2:
                map.put("numberType", 4);
                break;
            case 3:
                map.put("numberType", 3);
                break;
        }
        map.put("companyId", companyId);
        List<Map<String,Object>> agents = agentOrderDao.queryListByNumberCodeAndNumberType(map);
        if(agentsOrder != null){
            agents.add(agentsOrder);
        }
        fatherSource.put("agents", agents);
        return fatherSource;
    }

}
