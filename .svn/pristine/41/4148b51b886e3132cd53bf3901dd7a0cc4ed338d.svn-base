
package com.wzlue.chain.web.controller.storage;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.wzlue.chain.sys.entity.SysUserEntity;
import com.wzlue.chain.sys.service.SysNumberRuleService;
import com.wzlue.chain.sys.service.SysUserRoleService;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wzlue.chain.web.controller.sys.AbstractController;

import com.wzlue.chain.storage.entity.OfferEntity;
import com.wzlue.chain.storage.service.OfferService;
import com.wzlue.chain.common.utils.PageUtils;
import com.wzlue.chain.common.base.Query;
import com.wzlue.chain.common.base.R;

import javax.servlet.http.HttpServletRequest;


/**
 * 仓储报盘
 *
 * @author
 * @email
 * @date 2018-08-27 14:15:36
 */
@RestController
@RequestMapping("/storage/offer")
public class OfferController extends AbstractController {
    @Autowired
    private OfferService offerService;
    @Autowired
    private SysNumberRuleService sysNumberRuleService;
    @Autowired
    private SysUserRoleService sysUserRoleService;

    /**
     * 列表
     */
    @RequestMapping("/list")
    public R list(@RequestParam Map<String, Object> params) {
        Query query = new Query(params);
        Long companyId = getUser().getCompanyId();
        if (companyId != null) {
            query.put("merchantId", companyId);
        }

        List<OfferEntity> offerList = offerService.queryList(query);
        int total = offerService.queryTotal(query);

        return R.page(offerList, total);
    }


    /**
     * 信息
     */
    @RequestMapping("/info/{id}")
    @RequiresPermissions("storage:offer:info")
    public R info(@PathVariable("id") Long id) {
        OfferEntity offer = offerService.queryObject(id);

        return R.ok().put("offer", offer);
    }

    /**
     * 保存
     */
    @RequestMapping("/save")
    @RequiresPermissions("storage:offer:save")
    public R save(@RequestBody OfferEntity offer) {
        SysUserEntity user = getUser();
        offer.setMerchantId(user.getCompanyId());//公司id
        offer.setDeptId(null);//部门id
        offer.setDelFlag(0);
        offer.setCreatedBy(user.getUserId());
        offer.setCreatedTime(new Date());
        offer.setStatus(0);
        //生成编码
        //先判断是否手动输入
        if (offer.getCode() == null || "".equals(offer.getCode())) {
            offer.setCode(sysNumberRuleService.getCodeNumber("storage_offer_code"));
        } else {
            OfferEntity offerEntity = offerService.checkCode(offer);
            if (offerEntity != null) {
                return R.error("编码已存在");
            }
        }
        offerService.save(offer);

        return R.ok();
    }

    /**
     * 修改
     */
    @RequestMapping("/update")
    @RequiresPermissions("storage:offer:update")
    public R update(@RequestBody OfferEntity offer) {
        offer.setUpdatedBy(getUserId());
        offer.setUpdatedTime(new Date());
        offerService.update(offer);

        return R.ok();
    }

    /**
     * 修改报盘上下架状态
     */
    @RequestMapping("/updateList")
    @RequiresPermissions("storage:offer:update")
    public R updateList(@RequestBody List<OfferEntity> offers) {
        for (OfferEntity offer : offers) {
            offer.setUpdatedBy(getUserId());
            offer.setUpdatedTime(new Date());
        }

        offerService.updateList(offers);

        return R.ok();
    }

    /**
     * 删除
     */
    @RequestMapping("/delete")
    @RequiresPermissions("storage:offer:delete")
    public R delete(@RequestBody Long[] ids) {
        offerService.deleteBatch(ids);

        return R.ok();
    }

    @RequestMapping("/checkCode")
    public R checkCode(@RequestBody OfferEntity offer) {
        offer = offerService.checkCode(offer);

        return R.ok().put("offer", offer);
    }


    /**
     * 列表
     */
    @RequestMapping("/queryByCompanyId")
    public R queryByCompanyId(@RequestBody String merchantId) {
        //String merchantId = request.getParameter("merchantId");
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("merchantId", merchantId);
        List<OfferEntity> list = offerService.queryList(params);

        return R.ok().put("list", list);
    }
}
